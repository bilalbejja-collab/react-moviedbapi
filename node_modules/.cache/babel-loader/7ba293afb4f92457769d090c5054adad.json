{"ast":null,"code":"const {\n  MongoClient\n} = require('mongodb');\n\nconst client = new MongoClient(process.env.MONGO_URI || 'mongodb://db');\n\nconst handler = async event => {\n  let data = [];\n\n  try {\n    switch (event.httpMethod) {\n      case 'GET':\n        data = await getComments(event.queryStringParameters.tvId);\n        break;\n\n      case 'POST':\n        insertComment(JSON.parse(event.body));\n        break;\n\n      default:\n        break;\n    }\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(data)\n    };\n  } catch (error) {\n    return {\n      statusCode: 500,\n      body: error.toString()\n    };\n  }\n};\n\nasync function insertComment(comment) {\n  await connect(collection => {\n    collection.insertOne(comment);\n  });\n}\n\nasync function getComments(tvId) {\n  /*\r\n  let data = [];\r\n  await connect(async collection => {\r\n    collection.find({ tvId: tvId }).forEach(comment => data.push(comment));\r\n  });\r\n    return data;\r\n  */\n  return \"COMMENTS\";\n}\n\nasync function connect(cb) {\n  try {\n    await client.connect();\n    let collection = await client.db('movieapi').collection('comments');\n    cb(collection);\n  } finally {\n    await client.close();\n  }\n}\n\nmodule.exports = {\n  handler\n};","map":{"version":3,"sources":["C:/workspace-bilal/servidor/tema7/Practica_APIs_BILAL/react-moviedbapi/src/comments/comments.js"],"names":["MongoClient","require","client","process","env","MONGO_URI","handler","event","data","httpMethod","getComments","queryStringParameters","tvId","insertComment","JSON","parse","body","statusCode","stringify","error","toString","comment","connect","collection","insertOne","cb","db","close","module","exports"],"mappings":"AACA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,OAAO,CAAC,SAAD,CAA/B;;AACA,MAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgBG,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,cAAzC,CAAf;;AAEA,MAAMC,OAAO,GAAG,MAAMC,KAAN,IAAe;AAC7B,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAI;AACF,YAAQD,KAAK,CAACE,UAAd;AACE,WAAK,KAAL;AACED,QAAAA,IAAI,GAAG,MAAME,WAAW,CAACH,KAAK,CAACI,qBAAN,CAA4BC,IAA7B,CAAxB;AACA;;AACF,WAAK,MAAL;AACEC,QAAAA,aAAa,CAACC,IAAI,CAACC,KAAL,CAAWR,KAAK,CAACS,IAAjB,CAAD,CAAb;AACA;;AACF;AACE;AARJ;;AAUA,WAAO;AACLC,MAAAA,UAAU,EAAE,GADP;AAELD,MAAAA,IAAI,EAAEF,IAAI,CAACI,SAAL,CAAeV,IAAf;AAFD,KAAP;AAID,GAfD,CAeE,OAAOW,KAAP,EAAc;AACd,WAAO;AAAEF,MAAAA,UAAU,EAAE,GAAd;AAAmBD,MAAAA,IAAI,EAAEG,KAAK,CAACC,QAAN;AAAzB,KAAP;AACD;AACF,CApBD;;AAsBA,eAAeP,aAAf,CAA6BQ,OAA7B,EAAsC;AACpC,QAAMC,OAAO,CAACC,UAAU,IAAI;AAC1BA,IAAAA,UAAU,CAACC,SAAX,CAAqBH,OAArB;AACD,GAFY,CAAb;AAGD;;AAED,eAAeX,WAAf,CAA2BE,IAA3B,EAAiC;AAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AAEC,SAAO,UAAP;AACA;;AAED,eAAeU,OAAf,CAAuBG,EAAvB,EAA2B;AACzB,MAAI;AACF,UAAMvB,MAAM,CAACoB,OAAP,EAAN;AACA,QAAIC,UAAU,GAAG,MAAMrB,MAAM,CAACwB,EAAP,CAAU,UAAV,EAAsBH,UAAtB,CAAiC,UAAjC,CAAvB;AACAE,IAAAA,EAAE,CAACF,UAAD,CAAF;AACD,GAJD,SAIU;AACR,UAAMrB,MAAM,CAACyB,KAAP,EAAN;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAAEvB,EAAAA;AAAF,CAAjB","sourcesContent":["\r\nconst { MongoClient } = require('mongodb');\r\nconst client = new MongoClient(process.env.MONGO_URI || 'mongodb://db');\r\n\r\nconst handler = async event => {\r\n  let data = [];\r\n  try {\r\n    switch (event.httpMethod) {\r\n      case 'GET':\r\n        data = await getComments(event.queryStringParameters.tvId);\r\n        break;\r\n      case 'POST':\r\n        insertComment(JSON.parse(event.body));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(data),\r\n    };\r\n  } catch (error) {\r\n    return { statusCode: 500, body: error.toString() };\r\n  }\r\n};\r\n\r\nasync function insertComment(comment) {\r\n  await connect(collection => {\r\n    collection.insertOne(comment);\r\n  });\r\n}\r\n\r\nasync function getComments(tvId) {\r\n  /*\r\n  let data = [];\r\n  await connect(async collection => {\r\n    collection.find({ tvId: tvId }).forEach(comment => data.push(comment));\r\n  });\r\n\r\n  return data;\r\n  */\r\n return \"COMMENTS\";\r\n}\r\n\r\nasync function connect(cb) {\r\n  try {\r\n    await client.connect();\r\n    let collection = await client.db('movieapi').collection('comments');\r\n    cb(collection);\r\n  } finally {\r\n    await client.close();\r\n  }\r\n}\r\n\r\nmodule.exports = { handler };\r\n"]},"metadata":{},"sourceType":"module"}