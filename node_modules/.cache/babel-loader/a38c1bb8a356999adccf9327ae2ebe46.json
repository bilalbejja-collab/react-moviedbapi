{"ast":null,"code":"const mongoose = require('mongoose');\n\nconst URI = process.env.MONGODB_URI ? '' : '';\nmongoose.connect(URI, {\n  useNewUrlParser: true,\n  useCreateIndex: true\n});\nconst connection = mongoose.connection;\nconnection.once('open', () => {\n  console.log(\"DB is connected\");\n});\n/*\r\nconst { MongoClient } = require('mongodb');\r\nconst client = new MongoClient(process.env.MONGO_URI || 'mongodb://db');\r\n\r\nconst handler = async event => {\r\n  let data = [];\r\n  try {\r\n    switch (event.httpMethod) {\r\n      case 'GET':\r\n        data = await getComments(event.queryStringParameters.tvId);\r\n        break;\r\n      case 'POST':\r\n        insertComment(JSON.parse(event.body));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(data),\r\n    };\r\n  } catch (error) {\r\n    return { statusCode: 500, body: error.toString() };\r\n  }\r\n};\r\n\r\nasync function insertComment(comment) {\r\n  await connect(collection => {\r\n    collection.insertOne(comment);\r\n  });\r\n}\r\n\r\nasync function getComments(tvId) {\r\n  let data = [];\r\n  await connect(async collection => {\r\n    collection.find({ tvId: tvId }).forEach(comment => data.push(comment));\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nasync function connect(cb) {\r\n  try {\r\n    await client.connect();\r\n    let collection = await client.db('movieapi').collection('comments');\r\n    cb(collection);\r\n  } finally {\r\n    await client.close();\r\n  }\r\n}\r\n\r\nmodule.exports = { handler };\r\n*/","map":{"version":3,"sources":["C:/workspace-bilal/servidor/tema7/Practica_APIs_BILAL/react-moviedbapi/src/comments/comments.js"],"names":["mongoose","require","URI","process","env","MONGODB_URI","connect","useNewUrlParser","useCreateIndex","connection","once","console","log"],"mappings":"AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAZ,GAA0B,EAA1B,GAA+B,EAA3C;AAEAL,QAAQ,CAACM,OAAT,CAAiBJ,GAAjB,EAAsB;AACpBK,EAAAA,eAAe,EAAE,IADG;AAEpBC,EAAAA,cAAc,EAAE;AAFI,CAAtB;AAKA,MAAMC,UAAU,GAAGT,QAAQ,CAACS,UAA5B;AAEAA,UAAU,CAACC,IAAX,CAAgB,MAAhB,EAAwB,MAAM;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nconst mongoose = require('mongoose');\r\n\r\nconst URI = process.env.MONGODB_URI ? '' : '';\r\n\r\nmongoose.connect(URI, {\r\n  useNewUrlParser: true,\r\n  useCreateIndex: true\r\n})\r\n\r\nconst connection = mongoose.connection;\r\n\r\nconnection.once('open', () => {\r\n  console.log(\"DB is connected\");\r\n})\r\n\r\n/*\r\nconst { MongoClient } = require('mongodb');\r\nconst client = new MongoClient(process.env.MONGO_URI || 'mongodb://db');\r\n\r\nconst handler = async event => {\r\n  let data = [];\r\n  try {\r\n    switch (event.httpMethod) {\r\n      case 'GET':\r\n        data = await getComments(event.queryStringParameters.tvId);\r\n        break;\r\n      case 'POST':\r\n        insertComment(JSON.parse(event.body));\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(data),\r\n    };\r\n  } catch (error) {\r\n    return { statusCode: 500, body: error.toString() };\r\n  }\r\n};\r\n\r\nasync function insertComment(comment) {\r\n  await connect(collection => {\r\n    collection.insertOne(comment);\r\n  });\r\n}\r\n\r\nasync function getComments(tvId) {\r\n  let data = [];\r\n  await connect(async collection => {\r\n    collection.find({ tvId: tvId }).forEach(comment => data.push(comment));\r\n  });\r\n\r\n  return data;\r\n}\r\n\r\nasync function connect(cb) {\r\n  try {\r\n    await client.connect();\r\n    let collection = await client.db('movieapi').collection('comments');\r\n    cb(collection);\r\n  } finally {\r\n    await client.close();\r\n  }\r\n}\r\n\r\nmodule.exports = { handler };\r\n*/"]},"metadata":{},"sourceType":"module"}